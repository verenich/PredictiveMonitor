package org.processmining.plugins.predictive_monitor.bpmn;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import org.deckfour.xes.extension.std.XConceptExtension;
import org.deckfour.xes.factory.XFactoryRegistry;
import org.deckfour.xes.model.XEvent;
import org.deckfour.xes.model.XLog;
import org.deckfour.xes.model.XTrace;

import weka_predictions.clusterers.HierarchicalClusterer_predictions;
import weka_predictions.clusterers.SimpleKMeans;
import weka_predictions.core.Attribute;
import weka_predictions.core.DenseInstance;
import weka_predictions.core.DistanceFunction;
import weka_predictions.core.Instance;
import weka_predictions.core.Instances;
import weka_predictions.core.SelectedTag;
import weka_predictions.core.converters.CSVLoader;
import weka_predictions.core.neighboursearch.PerformanceStats;

public class TraceClusterer {

	Map<String, Integer> alphabetMap = new HashMap<String, Integer>();
	ArrayList<Instance> instanceAL = new ArrayList<Instance>();
	Instances originalInstances = null;
	HashMap<Integer, XTrace> instanceTraceMap = new HashMap<Integer, XTrace>();
	private SimpleKMeans kMeans = null;

/*	public static void main(String[] args) {
		String file = "./R/data/boh2.csv";
		cluster(file);
	}*/


	public void cluster(String filePath){

		try {

			 // load CSV
		    CSVLoader loader = new CSVLoader();
			//ArffLoader loader = new ArffLoader();
		    loader.setSource(new File(filePath));
		    Instances data = loader.getDataSet();

/*		    for (int i = 0; i < data.size(); i++) {
				Instance instance = data.get(i);
				map.put(instance, i);
			}*/

		    // save ARFF
/*		    ArffSaver saver = new ArffSaver();
		    saver.setInstances(data);
		    saver.setFile(new File("./output/boh.arff"));
		    //saver.setDestination(new File("./output/boh.arff"));
		    saver.writeBatch();
*/
			//Instances data = DataSource.read();

			HierarchicalClusterer_predictions h = new HierarchicalClusterer_predictions();
			DistanceFunction d = new DistanceFunction() {

				@Override
				public void setOptions(String[] options) throws Exception {
					// TODO Auto-generated method stub

				}

				@Override
				public Enumeration listOptions() {
					// TODO Auto-generated method stub
					return null;
				}

				@Override
				public String[] getOptions() {
					// TODO Auto-generated method stub
					return null;
				}

				@Override
				public void update(Instance ins) {
					// TODO Auto-generated method stub

				}

				@Override
				public void setInvertSelection(boolean value) {
					// TODO Auto-generated method stub

				}

				@Override
				public void setInstances(Instances insts) {
					// TODO Auto-generated method stub

				}

				@Override
				public void setAttributeIndices(String value) {
					// TODO Auto-generated method stub

				}

				@Override
				public void postProcessDistances(double[] distances) {
					// TODO Auto-generated method stub

				}

				@Override
				public boolean getInvertSelection() {
					// TODO Auto-generated method stub
					return false;
				}

				@Override
				public Instances getInstances() {
					// TODO Auto-generated method stub
					return null;
				}

				@Override
				public String getAttributeIndices() {
					// TODO Auto-generated method stub
					return null;
				}

				@Override
				public double distance(Instance first, Instance second, double cutOffValue, PerformanceStats stats) {
					// TODO Auto-generated method stub
					return 0;
				}

				@Override
				public double distance(Instance first, Instance second, double cutOffValue) {
					// TODO Auto-generated method stub
					return 0;
				}

				@Override
				public double distance(Instance first, Instance second, PerformanceStats stats) throws Exception {
					// TODO Auto-generated method stub
					return 0;
				}

				private ArrayList<String> getInstanceString (Instance instance){
					ArrayList<String> instanceString = new ArrayList<String>();
					for (int i = 0; i < instance.numAttributes(); i++) {
						Attribute a = instance.attribute(i);
						instanceString.add((new Double(instance.value(i))).toString());
					}
					return instanceString;
				}

				@Override
				public double distance(Instance first, Instance second) {
					ArrayList<String> firstS = getInstanceString(first);
					ArrayList<String> secondS = getInstanceString(second);
					EditDistance eD = new EditDistance(firstS, secondS);
					return eD.computeNormalizedEditDistance();
				}
			};

			 h.setDistanceFunction(d);
			 SelectedTag s = new SelectedTag(1, HierarchicalClusterer_predictions.TAGS_LINK_TYPE);
			 h.setLinkType(s);

			 h.buildClusterer(data);


			 System.out.println(h.graph());
			 int[] clusters = h.getClusters();
			 System.out.println(h.getNumClusters());
			 for (int i = 0; i < clusters.length; i++) {
				System.out.print(clusters[i]+" ");
			}


		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


/*		 try {
			 AlgoKMeans algoKMeans = new AlgoKMeans();
			 algoKMeans.runAlgorithm(filePath, 2);
			algoKMeans.printStatistics();
			algoKMeans.saveToFile("./output/boh.txt");

		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/





	}

	public void writeTraceInstances (XLog log, String filePath){
		int max = 100;

		try {
			ArrayList<ArrayList<String>> list = new ArrayList<ArrayList<String>>();
			int maxLength = -1;
			int j=0;
			for (XTrace trace : log) {
				if(j<max){
					int i=0;
					ArrayList<String> string = new ArrayList<String>() ;
					for (XEvent event : trace) {
						String eventLabel = XConceptExtension.instance().extractName(event);
						Integer index = alphabetMap.get(eventLabel);
						if (index==null){
							index = alphabetMap.size();
							alphabetMap.put(eventLabel, index);
						}
						string.add(index.toString());
						i++;
					}
					if (i>maxLength)
						maxLength = i;
					list.add(string);
					j++;
				}
			}
			FileWriter fW = new FileWriter(new File(filePath));
			for (int i = 0; i < maxLength; i++) {
				if (i>0)
					fW.write(",");
				fW.write("A"+i);
			}
			fW.write("\n");
			for (ArrayList<String> string : list) {
				for (int i = 0; i < maxLength; i++) {
					if (i>0)
						fW.write(",");
					if (i<string.size())
						fW.write(string.get(i));
				}
				fW.write("\n");
			}
			fW.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public HashMap<Integer, ArrayList<Integer>> clusterTraceByFrequency(XLog log, int numClusters){
		HashMap<Integer, ArrayList<Integer>> instanceMap = new HashMap<Integer, ArrayList<Integer>>();
		originalInstances = computeFrequencyTraceInstances(log);
		System.out.println(originalInstances.toString());
		// create the model
		kMeans = new SimpleKMeans();
		try {
			kMeans.setNumClusters(numClusters);
			kMeans.buildClusterer(originalInstances);

			//TEMP
//			System.out.println("NUM CLUSTERS "+numClusters+" "+kMeans.getAvgSilCoeff());
//			FileWriter fW = new FileWriter(new File("./output/temp_silhouette.txt"));
//			fW.write("NUM CLUSTERS "+numClusters+" "+kMeans.getAvgSilCoeff()+"\n");
//			fW.close();

			ArrayList<Attribute> attributes = new ArrayList<Attribute>();
			for (int i = 0; i<originalInstances.numAttributes(); i++) {
				attributes.add(originalInstances.attribute(i));
			}

			// get cluster membership for each instance
			for (int i = 0; i < originalInstances.numInstances(); i++) {
				int clusterNumber = kMeans.clusterInstance(originalInstances.instance(i));
				//= new ArrayList<Integer>();
				ArrayList<Integer> instanceIndexes = instanceMap.get(clusterNumber);
				if (instanceIndexes == null){
					//instanceIndexes = new Instances("I"+i, attributes, originalInstances.numInstances());
					instanceIndexes = new ArrayList<Integer>();
				}
				instanceIndexes.add(i);
				instanceMap.put(new Integer(clusterNumber), instanceIndexes);
			}


/*		// print out the cluster centroids
		Instances centroids = kMeans.getClusterCentroids();
		for (int i = 0; i < centroids.numInstances(); i++) {
		  System.out.print("Centroid ");
		  System.out.print(i + 1);
		  System.out.print (": ");
		  System.out.println (centroids.instance(i));
		}

		// get cluster membership for each instance
		for (int i = 0; i < data.numInstances(); i++) {
			System.out.print(data.instance(i));
			System.out.print(" is in cluster ");
			System.out.println(kMeans.clusterInstance(data.instance(i)) + 1);
		}*/

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return instanceMap;

	}

	public Instances computeFrequencyTraceInstances(XLog log){

			for (XTrace trace : log) {
				for (XEvent event : trace) {
					String eventLabel = XConceptExtension.instance().extractName(event);
					Integer index = alphabetMap.get(eventLabel);
					if (index==null){
						index = alphabetMap.size();
						alphabetMap.put(eventLabel, index);
					}
				}
			}

			ArrayList<Attribute> attributes = new ArrayList<Attribute>();
			for (String key : alphabetMap.keySet()) {
				Attribute attr = new Attribute(key, alphabetMap.get(key));
				attributes.add(attr);
			}

			Instances data = new Instances("DATA", attributes, log.size());

			int i = 0;
			for (XTrace trace : log) {
				Instance instance = new DenseInstance(alphabetMap.size());
				for (XEvent event : trace) {
					String eventLabel = XConceptExtension.instance().extractName(event);
					Integer index = alphabetMap.get(eventLabel);
					Double value = instance.value(index);
					if (value.isNaN())
						instance.setValue(index, new Double(1));
					else
						instance.setValue(index, value+1);
				}
				data.add(instance);
				instanceTraceMap.put(i, trace);
				i++;
			}


			return data;
		}

	public XLog computeXLogCluster(ArrayList<Integer> instanceIndexes){
		XLog clusterLog = XFactoryRegistry.instance().currentDefault().createLog();
		for (Integer index : instanceIndexes) {
			//Instance instance = originalInstances.get(index);
			//int index = originalInstances.indexOf(instance);
			XTrace trace = instanceTraceMap.get(index);
			clusterLog.add(trace);
		}
		return clusterLog;
	}

	public int clusterInstance (Instance instance, HashMap<Integer,XLog> clusters){
		int clusterNumber = -1;
		try {
			Instances centroids = kMeans.getClusterCentroids();
			DistanceFunction dF = kMeans.getDistanceFunction();
			int minCluster = clusters.keySet().iterator().next();
			double min = dF.distance(centroids.get(minCluster), instance);
			for (Integer clusterIndex: clusters.keySet()) {
				Instance centroid  = centroids.get(clusterIndex);
				double dist = dF.distance(centroid,instance);
				if (dist<min){
					min = dist;
					minCluster= clusterIndex;
				}
			}
			//clusterNumber =  kMeans.clusterInstance(instance);
			clusterNumber = minCluster;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return clusterNumber;
	}

	public int clusterTrace(XTrace trace, HashMap<Integer,XLog> clusters){
		Instance instance = convertTraceInInstance(trace);
		int clusterNumber = clusterInstance(instance, clusters);
		return clusterNumber;
	}

	public Instance convertTraceInInstance(XTrace trace){
		Instance instance = new DenseInstance(alphabetMap.size());
		for (XEvent event : trace) {
			String eventLabel = XConceptExtension.instance().extractName(event);
			Integer index = alphabetMap.get(eventLabel);
			Double value = instance.value(index);
			if (value.isNaN())
				instance.setValue(index, new Double(1));
			else
				instance.setValue(index, value+1);
		}
		return instance;

	}


}
